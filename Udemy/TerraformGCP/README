Udemy
Terrafor for Beginners using GCP - Google Cloud (Hands-on)
Ankit Mistry

Download terraform from here:
https://developer.hashicorp.com/terraform/downloads?ajs_aid=0b8bd173-2796-4916-84f7-a17d4d7fa9ac&product_intent=terraform

Files written in HCL (Hashicorp Configuration Language)

3 Steps
1. Initialize - install plugins needed to manage the infrastructure
2. Plan - Preview the changes Terraform will make to match the configuration
3. Apply - Make the planned changes

Sample terraform syntax:
# Create a resource block
# resource type = local_file (provided by resource provider)
# resource name = sample_res (we provide this)
resource local_file sample_res {
    # These are resource arguments/attributes
    
    # file name
    filename = "sample.txt"

    # file content
    content = "I love Terraform"
}

A good VSCode extension is "Terraform" by Anton Kulikov


################## Terraform init:
> terraform version
Terraform v1.5.7
on windows_amd64
> terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/local...
- Installing hashicorp/local v2.4.0...
- Installed hashicorp/local v2.4.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.


################## Terraform plan:
> terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.sample_res will be created
  + resource "local_file" "sample_res" {
      + content              = "I love Terraform"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "sample.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.



################## Terraform apply:
> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.sample_res will be created
  + resource "local_file" "sample_res" {
      + content              = "I love Terraform"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "sample.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.sample_res: Creating...
local_file.sample_res: Creation complete after 0s [id=f0702396afaf73d3f0a3d14376a3196589381e01]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

################## Results
Created sample.txt file in the top-level directory with "I love Terraform" as the contents.
Also creates a terraform.tfstate file that tracks the current state of the terraform deployment

###################################################

"local_sensitive_file" can be used instead of "local_file" to prevent "content" from being displayed in logging.
local_sensitive_file also sets file_permission to 0700 by default.

The training recommended a deprecated setting, but terraform gave a warning.


###################################################

The "random" provider allows use of randomness within the configuration

NOTE: When addin a new provider, you may get an error indicating "Inconsistent dependency lock file"
when you run "terraform plan".
SOLUTION: This means you're adding a new provider that wasn't installed the last time "terraform init"
was run and you have to run "terraform init -upgrade" to add it

The "output" block can be used to display content:

Sample:
resource random_integer rint {
    # [required]: minimum integer
    min = 80
    # [required]: maximum integer
    max = 200
}

NOTE: If you don't change the "random_integer" block when you run
"terraform plan", it won't change the random integer value.

###################################################

When referencing "variables", use "var.<variable_name>

Variables are stored in variables.tf

When using variables, you can just create :
variable filename {}
And terraform will ask you to input the variable

terraform apply -var "filename=sample.txt"
also works

ENV variables also work:
export TF_VAR_filename="sample.txt"

Variable priority setting:
4. TF_VAR_filename
3. terraform.tfvars
2. variable.auto.tfvars
1. terraform apply -var "filename=sample.txt" (highest priority)

###############################################

Providers are downloaded with terraform init

Dependencies can by referenced inside the tf files by
indexing with ${random_string.name2.id} (example)
${<provider>.<name>.id}

We can tell terraform we depend on something explicitly by using:
depends_on = [random_string.name2]

###############################################

To destroy everything:
> terraform destroy

###############################################

Put outputs in "output.tf" file

###############################################

Lifecycle rules:

  lifecycle {
    # This tells terraform to only delete the existing
    # instance after the new instance is created
    create_before_destroy = true

    # Tells terraform to prevent this resource from being
    # destroyed (terraform destroy)
    prevent_destroy = false

    # Tells terraform to not recreate the resource if the
    # "min" attribute changes
    ignore_changes = [min]
  }
  
###############################################

Data sources are like resource and output as they define
blocks.

To read from a file, and access, use:
data.local_file.<datasource name>.content


###############################################

Section 4: Google Cloud

1. Create a GCP Project
2. Create a GCP Service Account with no additional roles

Google has a "Google" provider

https://registry.terraform.io/providers/hashicorp/google/latest/docs


3. Set up Google Provider in main.tf

provider "google" {
    # The GCP Project to Configure
    project = var.gcp_projectid
    # The Region to work in
    region = var.gcp_region
    # The GCP Zone
    zone = var.gcp_zone
}

When using "google" provider, it's better
to use the HashiCorp VSCode extension

Note: To use gcloud, I had to set my execution policy to RemoteSigned:
> Set-ExecutionPolicy RemoteSigned -Scope LocalMachine

Log into GCP from your console
> gcloud auth application-default login

This creates "application_default_credentials.json" on your local machine.

###############################################

PREFERRED:
Using a Service Account to deploy to GCP

provider needs "credentials":

provider "google" {
    # The GCP Project to Configure
    project = var.gcp_projectid
    # The Region to work in
    region = var.gcp_region
    # The GCP Zone
    zone = var.gcp_zone
    # Service Account Credentials to Authenticate to GCP
    credentials = var.gcp_crendentials
}

Go to "Service Accounts"
Click on 3 dots and click "Manage Keys"

THIS FAILS BECAUSE THE SERVICE ACCT DOESN'T HAVE PERMISSION:
"Permission 'storage.buckets.get' denied on resource (or it may not exist)."

In GCP Console, go to IAM and "Grant Permission".  Add terraform-gcp... as "Storage Admin" role.

NOTE: terraform might need both create and delete permission to make changes.

###############################################

Section 5: Working with Cloud Storage

https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/storage_bucket

Moving provider requirements and configurations into
provider.tf

###############################################

Section 6: Google Cloud Network

When creating a VPC network, there are 2 firewall
rules that are automatically added:
1. Deny all ingress
2. Allow all egress

To create VPC in terraform, use the google_compute_network resource

https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_network

Note: GCP is weird about underscores in its names
I'm starting to use hyphens everywhere a GCP asset
name is created.
Note: GCP is also weird with requiring lowercase names
for things like buckets/VPCs

Service account requires: compute.network.create permission

Go to IAM and give terraform-gcp the "Compute Network Admin" role

https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_firewall

Requires compute.firewalls.create permission
(Compute Security Admin)


###############################################

Section 7: Google Compute Engine

Virtual Machines in the Cloud

google_compute_instance

https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_instance

Machine types enumerated here:
https://cloud.google.com/compute/docs/general-purpose-machines

> gcloud compute images list

Requires 'compute.images.get' permission
"Compute Instance Admin (v1)"

Requires permission for 'iam.serviceAccountUser'
"Service Account User"


###############################################

Section 8: Google Cloud Run

Containerized serverless application

You can stage your containers in "Artifact Registry" that are then used by "Cloud Run"

Permission needed:
run.services.create  -  Cloud Run Admin